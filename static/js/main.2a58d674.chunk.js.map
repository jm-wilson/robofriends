{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","actions.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","height","width","src","CardList","robots","length","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundry","state","hasError","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","FILTER_ROBOTS","CHANGE_CLICKME_COUNTER","filterRobots","text","payload","filter","robot","toLowerCase","includes","App","counter","useSelector","clickMe","searchRobots","requestRobots","filteredRobots","dispatch","useDispatch","fetch","then","response","json","data","catch","error","onClick","incrementClickme","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","isPending","initialStateClickme","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2a58d674.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow'>\r\n      <img alt='robots' height='200' width='200' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return !robots.length ? (\r\n    <div></div>\r\n  ) : (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='search robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '3px solid black', height: '800px' }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\nexport const FILTER_ROBOTS = 'FILTER_ROBOTS';\r\n\r\nexport const CHANGE_CLICKME_COUNTER = 'INCREMENT_CLICKME_COUNTER';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n  FILTER_ROBOTS,\r\n  CHANGE_CLICKME_COUNTER,\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n\r\nexport const filterRobots = (text, robots) => {\r\n  const payload = robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(text.toLowerCase());\r\n  });\r\n\r\n  return {\r\n    type: FILTER_ROBOTS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const incrementClickme = (counter) => ({\r\n  type: CHANGE_CLICKME_COUNTER,\r\n  payload: counter + 1,\r\n});\r\n","import React from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundry from '../components/ErrorBoundry.js';\r\nimport './App.css';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { incrementClickme, requestRobots, filterRobots, setSearchField } from '../actions.js';\r\n\r\nconst App = () => {\r\n  const counter = useSelector((state) => state.clickMe.counter);\r\n  const searchField = useSelector((state) => state.searchRobots.searchField);\r\n  const robots = useSelector((state) => state.requestRobots.robots);\r\n  const filteredRobots = useSelector((state) => state.filterRobots.robots);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSearchChange = (event) => {\r\n    dispatch(setSearchField(event.target.value));\r\n    dispatch(filterRobots(event.target.value, robots));\r\n  };\r\n\r\n  const onClickMe = () => {\r\n    dispatch(incrementClickme(counter));\r\n  };\r\n\r\n  if (!robots.length) {\r\n    requestRobots(dispatch);\r\n  }\r\n\r\n  if (robots.length && !filteredRobots.length && !searchField.length) {\r\n    dispatch(filterRobots('', robots));\r\n  }\r\n\r\n  return (\r\n    <div className='tc'>\r\n      <h1 className='f1'>RoboFriends</h1>\r\n      <button onClick={onClickMe}>Click me ({counter})</button>\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <Scroll>\r\n        <ErrorBoundry>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundry>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n  FILTER_ROBOTS,\r\n  CHANGE_CLICKME_COUNTER,\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const filterRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case FILTER_ROBOTS:\r\n      return { ...state, robots: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateClickme = {\r\n  counter: 0,\r\n};\r\n\r\nexport const clickMe = (state = initialStateClickme, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_CLICKME_COUNTER:\r\n      return { ...state, counter: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { searchRobots, requestRobots, filterRobots, clickMe } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots, filterRobots, clickMe });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}